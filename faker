#!/usr/bin/env node
/**
 * Created by rustam on 4/1/18.
 */
const faker = require('faker');
const fs = require('fs');
const program = require('commander');
const chalk = require('chalk');
const _ = require('lodash');

/*
 let announcements = [];
 let comments = [];

 for (let i = 1; i <= 10; i++) {
 let time = new Date();
 announcements.push({
 title: faker.lorem.words(4),
 text: faker.lorem.paragraph(8),
 owner: faker.name.firstName() + " " + faker.name.lastName(),
 owner_phone: faker.phone.phoneNumber('+998(9#) ###-##-##'),
 status: faker.random.arrayElement(['active', 'disabled', 'deleted']),
 img_url: faker.image.imageUrl(),
 country: faker.address.country(),
 region: faker.address.state(),
 count_views: faker.random.number({ min: 0, max: 100 }),
 due_date: parseInt(time.getTime() / 1000) + faker.random.number({ min: 81600, max: 571200 }),
 created_at: parseInt(time.getTime() / 1000) - faker.random.number({ min: 0, max: 3600 })
 });
 }
 for (let i = 1; i <= 20; i++) {
 let time = new Date();
 comments.push({
 ann_id: faker.random.number({ min: 1, max: 10 }),
 text: faker.lorem.paragraph(2),
 owner_name: faker.name.firstName() + " " + faker.name.lastName(),
 like_count: faker.random.number({ min: 0, max: 20 }),
 dislike_count: faker.random.number({ min: 0, max: 100 }),
 timestamp: parseInt(time.getTime() / 1000) - faker.random.number({ min: 0, max: 3600 }),
 status: faker.random.arrayElement(['approved', 'rejected'])
 });
 }
 writeFile('./announcements.json', JSON.stringify(announcements), err => console.log(err));
 writeFile('./comments.json', JSON.stringify(comments), err => console.log(err));
 */
program
    .version('1.0')
    .command('make [name]')
    .description('create an fixture')
    .alias('m')
    .action(function (name, cmd) {
        try {
            fs.copyFileSync('./template.stub', `./fixtures/${name}.js`);
            console.log(chalk.blue(`fixture '${name}' created successfully`));
        } catch (err) {
            console.log(chalk.red(err.toString()));
        }
    });

program
    .version('1.0')
    .command('generate [name]')
    .description('generate fake data')
    .alias('g')
    .option('-c --count <count>', 'count of generate data', parseInt)
    .action((name, cmd) => {
        try {
            const file = require(`./fixtures/${name}`);
            let data = [];
            for (let i = 1; i <= cmd.count; i++) {
                data.push(file.fake(faker));
            }
            if (!fs.existsSync('./fixtures/data')) {
                fs.mkdirSync('./fixtures/data');
            }
            fs.writeFileSync(`./fixtures/data/${name}.json`, JSON.stringify(data));
            console.log(chalk.green(`faker '${name}' generated successfully`));
        } catch (err) {
            if (err.code === 'MODULE_NOT_FOUND') {
                console.log(chalk.yellow(`fixture '${name}' not found`));
            } else {
                console.log(chalk.red(err.toString()));
            }
        }
    });
program
    .version('1.0')
    .command('load [name]')
    .description('insert fake data')
    .alias('l')
    .option('-m --model <path>', 'path to model')
    .action((name, cmd) => {
        try {
            const faker = require(`./fixtures/${name}`);
            faker.load(name);
        } catch (err) {
            if (err.code === 'MODULE_NOT_FOUND') {
                console.log(chalk.yellow(`fixture '${name}' not found`));
                console.log(chalk.red(err.toString()));
            } else {
                console.log(chalk.red(err.toString()));
            }
        }
    });
program.parse(process.argv);